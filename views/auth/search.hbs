<h2>Bands Browser</h2>


<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<script src='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css' rel='stylesheet' />


<style>
  body {
    margin: 0;
    padding: 0;
  }

  #mapSearch {
    position: absolute;
    top: 150px;
    bottom: 0;
    width: 100%;
    height: 100%;
  }

  .mapboxgl-popup {
    width: 150px;
    height: 125px;
  }
</style>

<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet'
  href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.0/mapbox-gl-geocoder.css' type='text/css' />
<div id='mapSearch'></div>
<style>
  #geocoder-container>div {
    min-width: 50%;
    margin-left: 2%;
  }
</style>

<script>
  var promise = new Promise(function (resolve, reject) {
    navigator.geolocation.getCurrentPosition(function (position) {
      console.log('obtenidas posiciones', position.coords.latitude)
      resolve(pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      })
    })
  });

  promise.then(currentCoords => {
    console.log(currentCoords)
    mapboxgl.accessToken = 'pk.eyJ1IjoidmljYmFuIiwiYSI6ImNqczFobXl5cTFsbXI0M29jdXp6OXVqcGQifQ.YPIeCxviK0RvnP3aUa3qgg';
    var map = new mapboxgl.Map({
      container: 'mapSearch',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [-3.70275, 40.4183083],
      zoom: 6
    });
    var geocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken
    });

    map.addControl(geocoder);


    map.on('load', function () {
      map.addSource('single-point', {
        "type": "geojson",
        "data": {
          "type": "FeatureCollection",
          "features": []
        }
      });

      map.addLayer({
        "id": "point",
        "source": "single-point",
        "type": "circle",
        "paint": {
          "circle-radius": 10,
          "circle-color": "#007cbf"
        }
      });

      geocoder.on('result', function (ev) {
        map.getSource('single-point').setData(ev.result.geometry);
      });
    });

    map.addControl(new mapboxgl.NavigationControl());

    map.addControl(new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true
    }));

    map.on('load', function () {
      // Add a new source from our GeoJSON data and set the
      // 'cluster' option to true. GL-JS will add the point_count property to your source data.
      map.addSource("bands", {
        type: "geojson",
        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
        data: "http://localhost:3000/auth/search/bands",
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
      });

      map.addLayer({
        id: "clusters",
        type: "circle",
        source: "bands",
        filter: ["has", "point_count"],
        paint: {
          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
          // with three steps to implement three types of circles:
          //   * Blue, 20px circles when point count is less than 100
          //   * Yellow, 30px circles when point count is between 100 and 750
          //   * Pink, 40px circles when point count is greater than or equal to 750
          "circle-color": [
            "step",
            ["get", "point_count"],
            "#51bbd6",
            100,
            "#f1f075",
            750,
            "#f28cb1"
          ],
          "circle-radius": [
            "step",
            ["get", "point_count"],
            20,
            100,
            30,
            750,
            40
          ]
        }
      });

      map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "bands",
        filter: ["has", "point_count"],
        layout: {
          "text-field": "{point_count_abbreviated}",
          "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
          "text-size": 12
        }
      });

      map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "bands",
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-color": "#11b4da",
          "circle-radius": 4,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff"
        }
      });

      // inspect a cluster on click
      map.on('click', 'clusters', function (e) {
        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
        var clusterId = features[0].properties.cluster_id;
        map.getSource('bands').getClusterExpansionZoom(clusterId, function (err, zoom) {
          if (err)
            return;

          map.easeTo({
            center: features[0].geometry.coordinates,
            zoom: zoom
          });
        });
      });

      map.on('mouseenter', 'clusters', function () {
        map.getCanvas().style.cursor = 'pointer';
      });
      map.on('mouseleave', 'clusters', function () {
        map.getCanvas().style.cursor = '';
      });
    });

    map.on('load', function () {
      // Insert the layer beneath any symbol layer.
      var layers = map.getStyle().layers;

      var labelLayerId;
      for (var i = 0; i < layers.length; i++) {
        if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
          labelLayerId = layers[i].id;
          break;
        }
      }

      map.addLayer({
        'id': '3d-buildings',
        'source': 'composite',
        'source-layer': 'building',
        'filter': ['==', 'extrude', 'true'],
        'type': 'fill-extrusion',
        'minzoom': 15,
        'paint': {
          'fill-extrusion-color': '#aaa',

          // use an 'interpolate' expression to add a smooth transition effect to the
          // buildings as the user zooms in
          'fill-extrusion-height': [
            "interpolate", ["linear"], ["zoom"],
            15, 0,
            15.05, ["get", "height"]
          ],
          'fill-extrusion-base': [
            "interpolate", ["linear"], ["zoom"],
            15, 0,
            15.05, ["get", "min_height"]
          ],
          'fill-extrusion-opacity': .6
        }
      }, labelLayerId);
    });

    axios.get("http://localhost:3000/auth/search/bands")
      .then(response => {
        console.log(response)

        response.data.usersArray.forEach((place, index) => {
          if (place.place === undefined) return
          console.log(place._id)

          let newMarker = new mapboxgl.Marker()
            /*console.log(place.id)*/
            .setLngLat(place.place)
            .setPopup(new mapboxgl.Popup({ offset: 25, className: "mapboxgl-popup" }) // add popups
              .setHTML(`<p>${place.username}, ${place.style}, ${place.price} <a href='{{key}}/auth/search/band-info/${place._id}'>hola</a></p>`))
            .addTo(map);

          let userPlaces = {
            type: "FeatureCollection",
            features: [
              {
                "type": "Feature",
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    place.place.lat,
                    place.place.lng
                  ]
                }
              }]
          };

        })


        /*
        var geojson = {
          type: 'FeatureCollection',
          features: [{
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: [currentCoords.lng, currentCoords.lat]
            },
          },
          ]
        }
        new mapboxgl.Marker()
          .setLngLat(geojson.features[0].geometry.coordinates)
          .addTo(map);
        
    
        axios.get("http://localhost:3000/auth/search/bands")
    
          .then(response => {
            console.log('------', response.data)
    
            response.data.usersArray.forEach((place, index) => {
              if (place.place !== undefined) {
                let newMarker = new mapboxgl.Marker()
                  .setLngLat(place.place)
                  .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                    .setHTML(`<p>${place.username}</p><br><p>${place.style}</p><br><p>${place.price}</p><br><p><a href=""</p>`))
                  .addTo(map);
    
    
    
                let userPlaces = {
                  type: "FeatureCollection",
                  features: [
                    {
                      "type": "Feature",
                      "geometry": {
                        "type": "Point",
                        "coordinates": [
                          place.place.lat,
                          place.place.lng
                        ]
                      }
                    }]
                };
    
              }
    
            })
    
    */
      })


  });

</script>